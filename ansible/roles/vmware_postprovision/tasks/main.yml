---
- name: Lookup vms via uid_ems
  uri:
    url: "{{ manageiq.api_url }}/api/vms?filter[]=uid_ems={{ item.instance.hw_product_uuid }}&expand=resources"
    method: GET
    body:
      action: refresh
    body_format: json
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: lookup_vms_output
  until: lookup_vms_output.json.subcount > 0
  retries: "{{ max_retries }}"
  delay: "{{ retry_interval }}"
  with_items: "{{ vmware_created_vms.results }}"

- name: Log lookup_vms_output.results
  debug:
    var: lookup_vms_output.results
  when: verbose

- name: Set the svc_url
  set_fact:
    svc_url: "/api/{{ manageiq.service }}"

- name: Log svc_url
  debug:
    var: svc_url
  when: verbose

- name: Append resource href to vms list
  set_fact:
    vms: "{{ vms }} + [ { 'href': svc_url, 'resource': { 'href': '/api/vms/{{ item.json.resources[0].id }}' } } ]"
  with_items: "{{ lookup_vms_output.results }}"

- name: Log vms
  debug:
    var: vms
  when: verbose

- name: Add new vms to service
  uri:
    url: "{{ manageiq.api_url }}/api/services"
    method: POST
    body_format: json
    body:
      action: add_resource
      resources: "{{ vms }}"
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: add_output

- name: Log add_output.json.results[0].success
  debug:
    var: add_output.json.results[0].success
  when: verbose

- name: Check if the vms were successfully attached to service
  fail: msg="{{ add_output.json.results[0].message }}"
  when: add_output.json.results[0].success == false

- name: Assign retirement tag "{{ retirement_category }}:{{ retirement_tag }}" to service
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}/tags"
    method: POST
    body_format: json
    body:
      action: assign
      resources:
        - category: "{{ retirement_category }}"
          name: "{{ retirement_tag }}"
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: tag_service_output

- name: Log tag_service_output
  debug:
    var: tag_service_output
  when: verbose

- name: Assign retirement tag "{{ retirement_category }}:{{ retirement_tag }}" to VMs
  uri:
    url: "{{ manageiq.api_url }}/api/vms/{{ item.json.resources[0].id }}/tags"
    method: POST
    body:
      action: assign
      resources:
        - category: "{{ retirement_category }}"
          name: "{{ retirement_tag }}"
    body_format: json
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: assign_vmtag_output
  with_items: "{{ lookup_vms_output.results }}"

- name: Log assign_vmtag_output.results
  debug:
    var: assign_vmtag_output.results
  when: verbose

- name: Lookup the userid so that we can assign ownership
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.user }}?attributes=userid"
    method: GET
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: lookup_user_output

- name: Log lookup_user_output
  debug:
    var: lookup_user_output
  when: verbose

- name: Setting userid fact
  set_fact:
    userid: "{{ lookup_user_output.json.userid }}"

- name: Log userid
  debug:
    var: userid
  when: verbose

- name: Assign ownership "{{ userid }}" to the new vms
  uri:
    url: "{{ item.json.resources[0].href }}"
    method: POST
    body:
      action: set_owner
      resource:
        owner: "{{ userid }}"
    body_format: json
    validate_certs: "{{ manageiq_validate_certs }}"
    user: "{{ manageiq_user }}"
    password: "{{ manageiq_password }}"
    status_code: 200
  register: assign_cfowner_output
  with_items: "{{ lookup_vms_output.results }}"

- name: Log assign_cfowner_output
  debug:
    var: assign_cfowner_output
  when: verbose
